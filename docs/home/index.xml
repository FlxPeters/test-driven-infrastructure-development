<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homes on Test driven infrastructure development</title>
    <link>http://example.org/home/</link>
    <description>Recent content in Homes on Test driven infrastructure development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://example.org/home/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://example.org/home/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/home/intro/</guid>
      <description>Infrastructure as Code  Expectation  Reality  Testing is the way to success
 Code without tests is broken by design.
 Jacob
  How do we build this test driven?  Divide and conquer  Split the project in testable unit Test each unit in isolation Integrate units and test them together     Dockerized Python App
Package App as Docker image Ansible role Docker</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/home/docker_image_testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/home/docker_image_testing/</guid>
      <description>Part 01 Build and test a Docker image
 Dockerfile
 FROM python:alpine3.11 RUN adduser --disabled-password --gecos &#39;&#39; -u 1001 app USER app WORKDIR /home/app COPY --chown=app:app app.py app.py EXPOSE 8000 CMD [ &amp;quot;python3&amp;quot;, &amp;quot;app.py&amp;quot; ]   Container Structure Tests Static analysis Github
Validate the structure of a container image
schemaVersion: 2.0.0 fileExistenceTests: - name: &amp;quot;app.py&amp;quot; path: &amp;quot;/home/app/app.py&amp;quot; shouldExist: true uid: 1001 metadataTest: exposedPorts: [&amp;quot;8000&amp;quot;] cmd: [&amp;quot;python3&amp;quot;, &amp;quot;app.py&amp;quot;] workdir: &amp;quot;/home/app&amp;quot;   Hadolint  Linter Static analysis Github</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/home/ansible_role_testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/home/ansible_role_testing/</guid>
      <description>Part 02 Testing Ansible roles
 Molecule  Test Framework Github Docs
Modular framework for testing Ansible roles in many scenarios and distributions
Drivers: Ansible, Docker, Podman, Vagrant, Cloud providers
Verifiers: Ansible-Lint, yamllint, Ansible, Inspec, Testinfra, Goss
 Workflow  Install dependencies via Ansible Galaxy Lint the Ansible role code Prepare: Start one ore more test instances using a driver and apply prepare steps Converge: Apply the role via an Ansible playbook Run the playbook again to ensure idempotence Verify: Run one or more verifiers Cleanup   Ansible Lint Linter Github</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/home/terraform_module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/home/terraform_module/</guid>
      <description> Part 03 Create and test a Terraform module
 Terraform module structure
 Kitchen CI
 Terraform Kitchen
 Terratest
https://github.com/gruntwork-io/terratest
Terratest uses the Go testing framework. To use Terratest, you need to install:
 OPA
https://www.openpolicyagent.org/docs/latest/terraform/
 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/home/outro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/home/outro/</guid>
      <description>Conclution  &amp;ldquo;Testing infrastructure is hard&amp;rdquo;
   Split code into testable units
  Only test the scope of a unit
  Use proper tools for each kind of test
  Start small with simple defaults tests
  Write a test for each bugfix
   Questions?
 Credits Formula One Team: https://www.formula1.com/content/dam/fom-website/ooyala-videos/2019/7/gyYzY2aTE6olzALb6DBiz4WDQ63YUJmz
Stock Car: Rainer Willenbrock - CC licence at fotocommunity.de
https://blog.codecentric.de/en/2018/12/test-driven-infrastructure-ansible-molecule/</description>
    </item>
    
  </channel>
</rss>